# LETICIA PEREZ AMOR (190663449), FINAL DISSERTATION 

# Libraries
library(ggplot2)
library(e1071)
library(dgof)
library(car)
library(EnvStats)
library(forecast)
library(fANCOVA)

# ************************************************************************

setwd("~/Downloads")
data = read.csv("thesis.csv", header = TRUE)
price <- data$price
hour <- data$hour
log_returns <- diff(log(price), lag = 1)

# ************************************************************************

df <- data.frame(price)
df_log <- data.frame(log_returns)

# Figure 3.1
ggplot(df, aes(hour, price)) + geom_line() + ylab("Electricity price") + xlab("Time points") + labs(title = "Electricity price")
# Figure 3.2
ggplot(df_log, aes(hour[-1], log_returns)) + geom_line() + ylab("Electricity price") + xlab("Time points") + labs(title = "Log returns electricity price")

# ************************************************************************

i <- 0
for (i in 1:24){
  assign(paste("priceat", i-1, sep=""), (a <- price[c(seq(i, 70752, 24))]))
  i <- i+1
}
matrix_prices <- data.frame(priceat0, priceat1, priceat2, priceat3,priceat4,priceat5,priceat6,priceat7,priceat8,priceat9,priceat10,priceat11,priceat12,priceat13,priceat14,priceat15,priceat16,priceat17,priceat18,priceat19,priceat20,priceat21,priceat22,priceat23)

s <- 0
for (s in 1:24){
  assign(paste("median_at", s-1, sep=""), (median(matrix_prices[,s])))
  assign(paste("perc10_at", s-1, sep=""), (quantile(matrix_prices[,s], c(.1))))
  assign(paste("perc90_at", s-1, sep=""), (quantile(matrix_prices[,s], c(.9))))
  s <- s+1
}
perc90 <- c(perc90_at0,perc90_at1,perc90_at2,perc90_at3,perc90_at4,
            perc90_at5,perc90_at6,perc90_at7,perc90_at8,perc90_at9,
            perc90_at10,perc90_at11,perc90_at12,perc90_at13,perc90_at14,
            perc90_at15,perc90_at16,perc90_at17,perc90_at18,perc90_at19,
            perc90_at20,perc90_at21,perc90_at22,perc90_at23)
perc10 <- c(perc10_at0,perc10_at1,perc10_at2,perc10_at3,perc10_at4,
            perc10_at5,perc10_at6,perc10_at7,perc10_at8,perc10_at9,
            perc10_at10,perc10_at11,perc10_at12,perc10_at13,perc10_at14,
            perc10_at15,perc10_at16,perc10_at17,perc10_at18,perc10_at19,
            perc10_at20,perc10_at21,perc10_at22,perc10_at23)
median <- c(median_at0,median_at1,median_at2,median_at3,median_at4,
            median_at5,median_at6,median_at7,median_at8,median_at9,
            median_at10,median_at11,median_at12,median_at13,median_at14,
            median_at15,median_at16,median_at17,median_at18,median_at19,
            median_at20,median_at21,median_at22,median_at23)
time <- c(00, 01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23)

# Figure 3.3
plot(time, median, type = "l", col = "red",  lwd=2, ylim = c(10, 70), main = "Median & hourly spot prices plotted against 10th and 90th quantile", xlab = "Hour of the day", ylab = "Values")
lines(time, perc10, col="blue", lwd = 2)
lines(time, perc90, col="green", lwd = 2)
legend("topright", legend=c("Median", "10% Percentile", "90% Percentile"),
       col=c("red", "blue", "green"), lty=1:2, cex=0.8)

# *************************************************************************

# Table 3.4
# Overall
summary(log_returns)
var(log_returns)
skewness(log_returns)
kurtosis(log_returns)
# Hourly log returns
m <- 0
for (m in 1:24){
  assign(paste("log_returnsat", m-1, sep=""), (b <- log_returns[c(seq(m, 70752, 24))]))
  m <- m+1
}
log_returnsat23 <- log_returnsat23[!is.na(log_returnsat23)]
log_returnsat23 <- c(log_returnsat23, 0)
# Mean, median and max/min values
matrix_logreturns <- data.frame(log_returnsat0, log_returnsat1,log_returnsat2,log_returnsat3,log_returnsat4,log_returnsat5,log_returnsat6,log_returnsat7,log_returnsat8,log_returnsat9,log_returnsat10,log_returnsat11,log_returnsat12,log_returnsat13,log_returnsat14,log_returnsat15,log_returnsat16,log_returnsat17,log_returnsat18,log_returnsat19,log_returnsat20,log_returnsat21,log_returnsat22,log_returnsat23)
summary(matrix_logreturns)
# Variance, skewness and kurtosis
k <- 0
for (k in 1:24){
  assign(paste("var_at", k-1, sep=""), (var(matrix_logreturns[,k])))
  assign(paste("skew_at", k-1, sep=""), (skewness(matrix_logreturns[,k])))
  assign(paste("kurt_at", k-1, sep=""), (kurtosis(matrix_logreturns[,k])))
  k <- k+1
}

# *************************************************************************

# Figure 3.4
qqPlot(log_returnsat8, main = "QQ-Plot: Returns at 08:00", ylab = "Log returns at 08:00")
qqline(log_returnsat8, col="steelblue")
# Figure 3.5
qqPlot(log_returnsat21, main = "QQ-Plot: Returns at 21:00", ylab = "Log returns at 21:00")
qqline(log_returnsat21, col="steelblue")

# *************************************************************************

cdf = ecdf(log_returns)
# Figure 3.6
plot.ecdf(cdf, main = "ECDF of log returns")

# Source: https://stats.stackexchange.com/questions/367502/how-to-estimate-probability-density-function-pdf-from-empirical-cumulative-dis
xr = knots(cdf)
n <- length(xr)
k <- 1+log(n)
# Figure 3.7
hist(xr,col="grey87", freq = FALSE, breaks=k, ylim = c(0,20), main = "Probability density function")
lines(density(xr,  n=n), type="l", col = "grey27", lwd = 2)

# *************************************************************************

variance <- c(var_at0,var_at1,var_at2,var_at3,var_at4,var_at5,var_at6,var_at7,var_at8,
              var_at9,var_at10,var_at11,var_at12,var_at13,var_at14,var_at15,var_at16,
              var_at17,var_at18,var_at19,var_at20,var_at21,var_at22,var_at23)

mean <- c(mean_at0,mean_at1,mean_at2,mean_at3,mean_at4,mean_at5,mean_at6,mean_at7,
          mean_at8,mean_at9,mean_at10,mean_at11,mean_at12,mean_at13,mean_at14,
          mean_at15,mean_at16,mean_at17,mean_at18,mean_at19,mean_at20,mean_at21,
          mean_at22,mean_at23)
#Figure 3.8
plot(mean, type = "l", col="red", main = "Plot of mean and variance", ylab = "Mean and variance", xlab = "Time of the day")
lines(variance, col="blue")
abline(h=0, col="black", lwd=1, lty=2)
legend("topright", legend=c("Mean", "Variance"),
       col=c("red", "blue"), lty=1:2, cex=0.8)

# *************************************************************************

# Figure 4.4 
ts <- msts(price, seasonal.periods = c(24,24*7, 24*30))
par(mfrow = c(1,3))
acf(price,lag.max = 75, main = "Daily autocorrelation, lag max = 75")
acf(price, lag.max = 24*15, main = "Weekly autocorrelation, lag max = 24*15")
acf(price, lag.max=24*70, main = "Monthly autocorrelation, lag max = 24*70")

# *************************************************************************

ts_seasonal <- msts(price, seasonal.periods = c(24,24*7, 24*30, 24*365))
# Figure 4.5
autoplot(mstl(ts),main = "Price decomposition")

# *************************************************************************

ts_all <- msts(price, seasonal.periods = c(24,24*7))
ts_section <- price[67872:70751]
ts_ssection <- msts(ts_section, seasonal.periods = c(24,24*7))
ts_train_section <- ts_all[67872:70176]
ts_train_ssection <- msts(ts_train_section,seasonal.periods = c(24,24*7))
ts_test_section <- price[70177:70752]
ts_test_ssection <- msts(ts_test_section, seasonal.periods = c(24, 24*7))

# LOESS value 
period1 <- seq(67873,70752)
reach_loess <-loess.as(period1,ts_ssection, user.span = NULL)
loess1 <-reach_loess$pars$span
loess1

# STL with Arima
f1_section <- stlf(ts_train_ssection, h=577, s.window = c(24, 24*7), t.window = loess1,  method = c("arima"))
# Figure 4.6
fitted1_section <- f1_section$fitted
par(mfrow=c(1,2))
plot(ts_train_ssection, lwd=2, col = "black", type = "l", xlab = "Time in weeks", ylab = "Price", main = "Training against fitted values: ARIMA (2,1,2) model")
lines(fitted1_section, lty=8, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)
# Figure 4.7
plot(f1_section, type="l", xlim=c(14, 18.1), xlab="Time in weeks", ylab="Price")
lines(ts_ssection, col = "red", lty=3)
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)

# STL with ETS
f2_section <- stlf(ts_train_ssection, h=577, s.window = c(24, 24*7), t.window = loess1, method = c("ets"))
# Figure 4.8
fitted2_section <- f2_section$fitted
par(mfrow=c(1,2))
plot(ts_train_ssection, lwd=2, col = "black", type = "l", xlab = "Time in weeks", ylab = "Price", main = "Training against fitted values")
lines(fitted2_section, lty=8, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)
# Figure 4.9
plot(f2_section, type="l",xlim=c(14,18.1), xlab="Time in weeks", ylab="Price")
lines(ts_ssection, col = "red", lty=3)
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)

# TBATS model (shorter train set due to unexpected crashes in R)
fit3_section <- tbats(ts_train_ssection)
f3_section <- forecast(fit3_section, h = 577)
# Figure 4.10
fitted3_section <- f3_section$fitted
plot(ts_train_ssection, lwd=2, col = "black", type = "l", xlab = "Time in weeks", ylab = "Price", main = "Training against fitted values")
lines(fitted3_section, lty=3, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)

# Figure 4.11
plot(f3_section,xlim=c(14,18.1),xlab="Time in weeks", ylab="Price")
lines(ts_ssection, col="red", lty=3)
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)


# Seasonal naÃ¯ve
f4_section <- snaive(ts_train_ssection,h=577, drift = TRUE)
# Figure 4.12
fitted4_section <- f4_section$fitted
plot(ts_train_ssection,lwd=2, col = "black", type = "l", xlab = "Time in weeks", ylab = "Price", main = "Training against fitted values")
lines(fitted4_section, lty=3, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)

# Figure 4.13
plot(f4_section, type="l",xlim=c(14,18.1), xlab="Time in weeks", ylab="Price")
lines(ts_ssection, col="red", lty=3)
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)

# *************************************************************************

f11_s <- as.vector(f1_section$mean)
f22_s <- as.numeric(f2_section$mean)
f33_s <- as.numeric((f3_section$mean))
f44_s <- as.numeric(f4_section$mean)

# Table 4.1
accuracy1 <- data.frame(forecast::accuracy(f11_s, ts_test_ssection))
accuracy2 <- data.frame(forecast::accuracy(f22_s, ts_test_ssection))
accuracy4 <- data.frame(forecast::accuracy(f44_s, ts_test_ssection))
Accuracy <- rbind(Arima=accuracy1, ETS=accuracy2,  NaÃ¯ve=accuracy4)
Accuracy
accuracy3 <- data.frame(forecast::accuracy(f33_s, ts_test_ssection))
accuracy3

# *************************************************************************

# Figure 4.14
forecast::checkresiduals(f1_section$residuals)
# Figure 4.15
qqnorm(f1_section$residuals, pch=1, main="Q-Q plot of residuals")
qqline(f1_section$residuals, col="steelblue")


# *************************************************************************
# Appendix A 
ts_complete2 <- msts(price, seasonal.periods = c(24,24*7, 24*30))
ts_train_complete <- ts_complete2[1:56600]
# Include seasonality
ts_train_scomplete <- msts(ts_train_complete, seasonal.periods = c(24,24*7, 24*30))
ts_test_complete <- ts_complete2[56601:70750]

# LOESS value 
period2 <- seq(1,70752)
reach_loess2 <-loess.as(period2,ts_complete2, user.span = NULL)
loess2 <-reach_loess2$pars$span
loess2
# STL with Arima
f1_complete <- stlf(ts_train_scomplete, h=14150, s.window = c(24, 24*7, 24*30, 24*365), t.window = loess2, method = c("arima"))
fitted1_complete <- f1_complete$fitted
# Figure A.1
par(mfrow=c(1,2))
plot(ts_train_scomplete, lwd=2, col = "black", type = "l", xlab = "Time in years", ylab = "Price", main = "Training against fitted values: ARIMA (2,1,2) model")
lines(fitted1_complete, lty=8, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)

plot(f1_complete, type="l", xlab="Time in years", ylab="Price")
lines(ts_complete2, col = "red", lty=3)
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)

# STL with ETS
f2_complete <- stlf(ts_train_scomplete, h=14151, s.window = c(24, 24*7, 24*30, 24*365), t.window = loess2, method = c("ets"))
# Figure A.2
fitted2_complete <- f2_complete$fitted
par(mfrow=c(1,2))
plot(ts_train_scomplete, lwd=2, col = "black", type = "l", xlab = "Time in years", ylab = "Price", main = "Training against fitted values")
lines(fitted2_complete, lty=8, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)

plot(f2_complete, type="l", xlab="Time in years", ylab="Price")
lines(ts_complete2, col = "red", lty=3)
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)

# TBATS model (shorter train set due to unexpected crashes in R)
ts_tbats_section <- ts_complete2[35000:70752]
ts_tbats <- msts(ts_tbats_section, seasonal.periods = c(24,24*7,24*30))
ts_train_tbats <- ts_tbats_section[1:28601]
# Include seasonality
ts_train_stbats <- msts(ts_train_tbats, seasonal.periods=c(24,24*7,24*30))
ts_test_tbats <- ts_tbats_section[28602:35752]
# Include seasonality
ts_test_stbats <- msts(ts_test_tbats, seasonal.periods=c(24,24*7,24*30))

fit3_complete <- tbats(ts_train_stbats)
f3_complete <- forecast(fit3_complete$fitted.values, h = 7149)
# Figure A.3
fitted3_complete <- f3_complete$fitted
plot(ts_train_stbats, lwd=2, col = "black", type = "l", xlab = "Time in months", ylab = "Price", main = "Training against fitted values")
lines(fitted3_complete, lty=3, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)

plot(f3_complete,xlab="Time in months", ylab="Price", ylim=c(0,100))
lines(ts_tbats, col="red")
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)

# Seasonal naÃ¯ve
f4_complete <- snaive(ts_train_scomplete, h=14151, drift = TRUE)
# Figure A.4
fitted4_complete <- f4_complete$fitted
plot(ts_train_scomplete,lwd=2, col = "black", type = "l", xlab = "Time in years", ylab = "Price", main = "Training against fitted values")
lines(fitted4_complete, lty=3, lwd=1, col = "seagreen3")
legend("topright", legend=c("Observed", "Fitted"),
       col=c("black", "seagreen3"), lty=1:2, cex=0.8)

plot(f4_complete, type="l", xlab="Time in years", ylab="Price")
lines(ts_complete2, col="red", lty=2)
legend("topright", legend=c("Forecast", "Actual"),
       col=c("blue", "red"), lty=1:2, cex=0.8)


# *************************************************************************

f11_complete <- as.vector(f1_complete$mean)
f22_complete <- as.numeric(f2_complete$mean)
f33_complete <- as.numeric((f3_complete$mean))
f44_complete <- as.numeric(f4_complete$mean)

# Table 4.1
accuracy1_complete <- data.frame(forecast::accuracy(f11_complete, ts_test_complete))
accuracy2_complete <- data.frame(forecast::accuracy(f22_complete, ts_test_complete))
accuracy4_complete <- data.frame(forecast::accuracy(f44_complete, ts_test_complete))
Accuracy <- rbind(Arima=accuracy1, ETS=accuracy2,  NaÃ¯ve=accuracy4)
Accuracy
accuracy3 <- data.frame(forecast::accuracy(f33_complete, ts_test))
accuracy3

